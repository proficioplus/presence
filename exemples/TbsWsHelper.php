<?phpinclude("SOAP/Client.php");$TbsWsProtocol = 'http';$TbsWsDomaine = 'www.bfcinfo.eu';$TbsWsPort = '9000';$TbsWsTimeout = 200;$TbsWsDebug = false;/** * Classe d'aide aux utilisation des services web TBS * @author Hassane SLAOUI * @version 1.0 * @since TBS Framework 1.0 */class TbsWsHelper {	// Le proxy du services web	var $client;	// La session rendue par le service web	var $session;	// La session rendue par le service web	var $errorOn;	// La session rendue par le service web	var $lastErrorMessage;	// Code langue	var $codeLangue;    	// Nom de la transaction	var $cTransaction;	// les Paramétres de la transaction	var $parameteres;	//Type de flux	var $typFlux;	function TbsWsHelper($serviceName, $userId, $passwd) {		global $TbsWsProtocol, $TbsWsDomaine, $TbsWsPort, $TbsWsTimeout, $TbsWsDebug;		// Obtenir le proxy du service web		$adress = $TbsWsProtocol . '://' . $TbsWsDomaine . ':' . $TbsWsPort . '/ws/' . $serviceName . '?wsdl';		$wsdlHandler = new SOAP_WSDL($adress);		if ( PEAR::isError($wsdlHandler)) {		    $this->lastErrorMessage = $wsdlHandler->getMessage();		    $this->errorOn = true;		    echo("Error getting WSDL: " . $this->lastErrorMessage . "\n");		    return;		}		if ($TbsWsDebug) {			echo $wsdlHandler->generateProxyCode();		}		$this->client = $wsdlHandler->getProxy();		if ($TbsWsDebug) {			$this->client->_debug_flag = true;			$this->client->setOpt('trace', true);		}		// Positionner les options d'utilisation du proxy		$this->client->setEncoding("UTF-8");		$this->client->setOpt('timeout', $TbsWsTimeout);		// Obtenir la session en se connectant au service web		$params = array(			'arg0' => $userId,			'arg1' => $passwd			);		$this->session = $this->client->call('login', $params);		if ( PEAR::isError($this->session)) {		    $this->lastErrorMessage = $this->session->getMessage();		    echo("Error login: " . $this->lastErrorMessage . "\n");		    $this->errorOn = true;		}	}	function &isError() {		return $this->errorOn;	}	function &getLastErrorMessage() {		return $this->lastErrorMessage;	}	/**	 * Méthode à paramètres variables d'appel des méthodes des services web : 	 *	Le premier paramètre doit être le nom de la méthode à appeller	 */	function &call() {		// le nom de la méthode du service web		$methode = func_get_arg(0);		// Les paramètres d'appel		$params = Array();		$params["arg0"] = $this->session;		for ($i = 1 ; $i < func_num_args(); $i++) {			$params["arg" . $i] = func_get_arg($i);		}		$result = $this->client->call($methode, $params);		if ( PEAR::isError($result)) {		    echo("Error: " . $result->getMessage() . "\n");		    $this->errorOn = true;		}		return $result;	}	function &dispose() {		$params = array('arg0' => $this->session);		$this->client->call('logout', $params);	}}?>